//https://leetcode.com/problems/find-median-from-data-stream/

class MedianFinder {
public:
    priority_queue<int> maxheap;
    priority_queue<int,vector<int>,greater<int>> minheap;
    
    MedianFinder() {
        
    }
    
    void addNum(int num) 
    {
        //both heaps empty 
        if(maxheap.empty() && minheap.empty())
            maxheap.push(num);
        else
        {
            if(maxheap.top() < num)
                minheap.push(num);
            else
                maxheap.push(num);
        }
        
        //balance both heaps
        int n = maxheap.size();
        int m = minheap.size();
        
        if((n-m == 2) || (n-m == -2))
        {
            if(n>m)  //size of max heap more
            {
                int top = maxheap.top();
                maxheap.pop();
                minheap.push(top);
            }
            else
            {
                int top = minheap.top();
                minheap.pop();
                maxheap.push(top);
            }
        }
    }
    
    double findMedian()
    {
        //balance both heaps
        int n = maxheap.size();
        int m = minheap.size();
        
        //even case
        if((m+n)%2 == 0)
        {
            return ( (double)maxheap.top() + (double)minheap.top() )/2.0;
        }
        else
        {
            if(n>m)
                return maxheap.top();
            else
                return minheap.top();
        }
        
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
