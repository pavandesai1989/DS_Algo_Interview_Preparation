
//https://leetcode.com/problems/sudoku-solver/

class Solution {
private:
    bool isvalid(int row,int col,int c,vector<vector<char>> &board)
    {
        for(int i=0;i<board.size();i++)
        {
            //row
            if(board[row][i] == c)
                return false;
            
            if(board[i][col] == c)
                return false;
            
            if(board[3*(row/3) + (i/3)][3*(col/3) + (i%3)] == c)
                return false;
        }
        
        return true;

    }
    
    bool solve(vector<vector<char>> &board)
    {
        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board.size();j++)
            {
                if(board[i][j] == '.')
                {
                    for(char c='1';c<='9';c++)
                    {
                        if(isvalid(i,j,c,board) == true)
                        {
                            board[i][j] = c;
                            
                            //call recursion
                            if (solve(board) == true)
                                return true;
                            else
                            {
                                //backtrack
                                board[i][j] = '.';
                            }
                        }
                    }
                    return false; //tried 1 to 9. not possible to insert any 
                }
            }
        }
        
        return true;
    }
public:
    void solveSudoku(vector<vector<char>>& board) 
    {
        solve(board);
    }
};
