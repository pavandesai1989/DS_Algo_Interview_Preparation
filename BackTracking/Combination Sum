class Solution {
private:
    void helper(int idx,int target,vector<int> &arr,vector<vector<int>> &ans,vector<int> &ds)
    {
        //base case
        if(idx == arr.size())
        {
            if(target == 0)
                ans.push_back(ds);
            return;
        }
        
        //pick the element
        if(arr[idx] <=target)
        {
            //add in to ds
            ds.push_back(arr[idx]);
            //when we pick indx same. as we can pick ele many times
            helper(idx,target-arr[idx],arr,ans,ds);
            //remove the prev element before we call not pick case
            ds.pop_back();
        }
        
        //not pick case
        helper(idx+1,target,arr,ans,ds);
    }
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) 
    {
        vector<vector<int>> res;
        vector<int> ds;
        
        helper(0,target,candidates,res,ds);
        
        return res;
    }
};
