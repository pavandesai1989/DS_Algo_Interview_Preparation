https://www.codingninjas.com/codestudio/problems/rat-in-a-maze_1215030?leftPanelTab=1

#include<algorithm>    

bool issafe(vector<vector<int>> &m,int n,int x,int y,vector<vector<int>> &visited)
{
	if((x>=0 && x<n) && (y>=0 && y<n) && (visited[x][y] == 0) && (m[x][y] == 1))
		return true;
	else
		return false;
}



void solve(vector<vector<int>> &m,int n,vector<vector<int>> &visited,
		   int x,int y,string path,vector<string> &ans)
{
    //base case
	if(x == n-1 && y == n-1)
	{
		ans.push_back(path);
		return;
	}
		//visited as true
	visited[x][y] = true;
	
	//try to move down
	int newx = x+1;
	int newy = y;
	
	if(issafe(m,n,newx,newy,visited) == true)
	{
		path.push_back('D');
		solve(m,n,visited,newx,newy,path,ans);
		//back track
		path.pop_back();
	}
	
	//try to move up
    newx = x-1;
	newy = y;
	
	if(issafe(m,n,newx,newy,visited) == true)
	{
		path.push_back('U');
		solve(m,n,visited,newx,newy,path,ans);
		//back track
		path.pop_back();
	}
	
		//try to left
	newx = x;
	newy = y-1;
	
	if(issafe(m,n,newx,newy,visited) == true)
	{
		path.push_back('L');
		solve(m,n,visited,newx,newy,path,ans);
		//back track
		path.pop_back();
	}
	
		//try to right
	newx = x;
	newy = y+1;
	
	if(issafe(m,n,newx,newy,visited) == true)
	{
		path.push_back('R');
		solve(m,n,visited,newx,newy,path,ans);
		//back track
		path.pop_back();
	}
	
	//visited as false
	visited[x][y] = false;
}



vector < string > searchMaze(vector < vector < int >> & m, int n) 
{
    vector<vector<int>> visited = m; //imp case 
	vector<string> ans;
	
	if(m[0][0] == 0)
		return ans;
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			visited[i][j] = 0;
		}
	}
	
	string path = "";
	int srcx = 0;
	int srcy = 0;
	
	solve(m,n,visited,srcx,srcy,path,ans);
	
	sort(ans.begin(),ans.end());
	
	return ans;
}
