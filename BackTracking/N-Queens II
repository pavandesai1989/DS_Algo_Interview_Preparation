class Solution {
private:
    bool issafe(int row,int col,vector<string> &board,int n)
    {
        int x = row;
        int y = col;
        //check for diagonal up
        while(x>=0 && y>=0)
        {
            if(board[x][y] == 'Q')
                return false;
            
            x--;
            y--;
        }
        
        x = row;
        y = col;
        //left side
        while(y>=0)
        {
            if(board[x][y] == 'Q')
                return false;
            
            y--;
        }
        
        x = row;
        y = col;
        //dia down
        while(x<n && y>=0)
        {
            if(board[x][y] == 'Q')
                return false;
            
            x++;
            y--;
        }
        
        return true;
    }
    
    int solve(int col,vector<string> &board,vector<vector<string>> &ans,int n)
    {
        //base case 
        if(col == n)
        {
            return 1;
        }
        
        int ways = 0;
        
        //check for each row
        for(int row=0;row<n;row++)
        {
            if(issafe(row,col,board,n) == true)
            {
                board[row][col] = 'Q';
                ways +=solve(col+1,board,ans,n);
                
                //backtrack
                board[row][col] = '.';
            }
        }
        
        return ways;
    }    
public:
    int totalNQueens(int n) 
    {
               //vector<string> board(n,string(n,'.'));
        string start = "";
        for(int i=0;i<n;i++)
            start = start + ".";
        
        vector<string> board(n,start);
        
        vector<vector<string>> ans;
        
        return solve(0,board,ans,n);
        
        //return ans; 
    }
};
