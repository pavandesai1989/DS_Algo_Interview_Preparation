//https://www.codingninjas.com/codestudio/problems/combination-sum_981296?leftPanelTab=0
//https://leetcode.com/problems/combination-sum/


#include<vector>
#include<algorithm>

void helper(vector<int>& arr,int n,int tar,int idx,vector<int> &ds,vector<vector<int>> &res)
{
    //base case
    if(idx == n)
    {
        if(tar == 0)
        {
            res.push_back(ds);
            return;
        }
        return;
    }
    
    //pick case
    if(arr[idx] <= tar)
    {
        ds.push_back(arr[idx]);
        helper(arr,n,tar-arr[idx],idx,ds,res);
        ds.pop_back();
    }
    
    //not picl case
    helper(arr,n,tar,idx+1,ds,res);
}


vector<vector<int>> combSum(vector<int>& ARR, int B)
{
	vector<int> ds;
    vector<vector<int>> res;
    sort(ARR.begin(),ARR.end()); //Elements in each combination must be in non-decreasing order
    helper(ARR,ARR.size(),B,0,ds,res);
    
    return res;
}
