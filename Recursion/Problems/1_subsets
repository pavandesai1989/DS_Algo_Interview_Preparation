//https://leetcode.com/problems/subsets/

void helper(vector<int> nums,vector<int> output,int idx,vector<vector<int>> &res) //do not pass nums and output by reference
{
    //base case
    if(idx >= nums.size())
    {
        res.push_back(output);
        return;
    }
    
    //exclude case
    helper(nums,output,idx+1,res);
    
    //include ele
    //int element = nums[idx];
    output.push_back(nums[idx]);
    
    helper(nums,output,idx+1,res);
}

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) 
    {
        vector<int> output;
        vector<vector<int>> res;
        helper(nums,output,0,res);
        
        return res;
    }
};


Time Complexity: O(n(2 ^ n)). 
For every index i two recursive cases originate, So Time Complexity is O(2^n). If we include the time taken to copy the subset vector into
the res vector the time taken will be equal to the size of the subset vector.
Space Complexity: O(n). 
The space complexity can be reduced if the output array is not stored and the static and global variable is used to store the output string.
