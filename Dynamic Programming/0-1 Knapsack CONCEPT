******* RECURSIVE SOLUTION *****
// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       //base case
       if(W == 0 || n == 0)
          return 0;
       
        if(wt[n-1]<=W)
        {
            //pick the wt. So W will reduce and also n to n-1
            int pick = val[n-1] + knapSack(W-wt[n-1],wt,val,n-1);
            int nopick = knapSack(W,wt,val,n-1);
            
            return max(pick,nopick);
        }
        else if(wt[n-1]>W)
        {
            return knapSack(W,wt,val,n-1);
        }
    }
};

// { Driver Code Starts.

int main()
 {
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //reading number of elements and weight
        int n, w;
        cin>>n>>w;
        
        int val[n];
        int wt[n];
        
        //inserting the values
        for(int i=0;i<n;i++)
            cin>>val[i];
        
        //inserting the weights
        for(int i=0;i<n;i++)
            cin>>wt[i];
        Solution ob;
        //calling method knapSack()
        cout<<ob.knapSack(w, wt, val, n)<<endl;
        
    }
	return 0;
}  // } Driver Code Ends

************ MEMOIZATION **********
// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution
{
    private:
    int helper(int W, int wt[], int val[], int n,int dp[1002][1002])
    {
        //base case
       if(W == 0 || n == 0)
          return 0;
        
        if(dp[n][W] != -1)
           return dp[n][W];
       
        if(wt[n-1]<=W)
        {
            //pick the wt. So W will reduce and also n to n-1
            int pick = val[n-1] + helper(W-wt[n-1],wt,val,n-1,dp);
            int nopick = helper(W,wt,val,n-1,dp);
            
            return dp[n][W] = max(pick,nopick);
        }
        else if(wt[n-1]>W)
        {
            return dp[n][W] = helper(W,wt,val,n-1,dp);
        }
    }
    
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
         int dp[1002][1002];
         memset(dp,-1,sizeof(dp));
         
         return helper(W,wt,val,n,dp);
         
    }
};

// { Driver Code Starts.

int main()
 {
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //reading number of elements and weight
        int n, w;
        cin>>n>>w;
        
        int val[n];
        int wt[n];
        
        //inserting the values
        for(int i=0;i<n;i++)
            cin>>val[i];
        
        //inserting the weights
        for(int i=0;i<n;i++)
            cin>>wt[i];
        Solution ob;
        //calling method knapSack()
        cout<<ob.knapSack(w, wt, val, n)<<endl;
        
    }
	return 0;
}  // } Driver Code Ends

************** TABULATION************
// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution
{
    private:
    int helper(int W, int wt[], int val[], int n,int dp[1002][1002])
    {
        //base case
       if(W == 0 || n == 0)
          return 0;
          
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<W+1;j++)
            {
                if(wt[i-1]<=j)
                {
                    int pick = val[i-1] + dp[i-1][j-wt[i-1]];
                    int nopick = dp[i-1][j];
                
                    dp[i][j] = max(pick,nopick);   //no return statement here
                }
                else
                    dp[i][j] = dp[i-1][j]; //no return statement here

            }
        }
        
        return dp[n][W]; //imp

    }
    
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
         int dp[1002][1002];
         memset(dp,-1,sizeof(dp));
         
         //initialize base case
         for(int i=0;i<n+1;i++)
         {
             for(int j=0;j<W+1;j++)
             {
                 if(i == 0 || j == 0 )
                 {
                     dp[i][j] = 0;
                 }
             }
         }
         
         return helper(W,wt,val,n,dp);
         
    }
};

// { Driver Code Starts.

int main()
 {
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //reading number of elements and weight
        int n, w;
        cin>>n>>w;
        
        int val[n];
        int wt[n];
        
        //inserting the values
        for(int i=0;i<n;i++)
            cin>>val[i];
        
        //inserting the weights
        for(int i=0;i<n;i++)
            cin>>wt[i];
        Solution ob;
        //calling method knapSack()
        cout<<ob.knapSack(w, wt, val, n)<<endl;
        
    }
	return 0;
}  // } Driver Code Ends 



