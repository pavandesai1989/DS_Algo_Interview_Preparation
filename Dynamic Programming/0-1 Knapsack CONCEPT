******* RECURSIVE SOLUTION *****
int helper(int idx,vector<int> weight,vector<int> value,int maxweight)
{
    //base case
    if(idx == 0)
    {
        if(weight[0] <= maxweight)
            return value[0];
        else
            return 0;
    }
    
    //do all stuffs
    int nottake = helper(idx-1,weight,value,maxweight);
    
    //take case. take the current ele and call on next item
    int take = INT_MIN; // as we need max value
    if(weight[idx] <= maxweight)
       take = value[idx] + helper(idx-1,weight,value,maxweight-weight[idx]);
    
    return max(take,nottake);
}


int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	return helper(n-1,weight,value,maxWeight);
}

************ MEMOIZATION **********
int helper(int idx,vector<int> weight,vector<int> value,int W,vector<vector<int>> &dp)
{
    //base case
    if(idx == 0)
    {
        if(weight[0] <= W)
            return value[0];
        else
            return 0;
    }
    
    if(dp[idx][W] != -1)
        return dp[idx][W];
    
    //do all stuffs
    int nottake = helper(idx-1,weight,value,W,dp);
    
    //take case. take the current ele and call on next item
    int take = INT_MIN; // as we need max value
    if(weight[idx] <= W)
       take = value[idx] + helper(idx-1,weight,value,W-weight[idx],dp);
    
    return dp[idx][W] = max(take,nottake);
}


int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
    vector<vector<int>> dp(n,vector<int>(maxWeight+1,-1));
	return helper(n-1,weight,value,maxWeight,dp);
}

Time Complexity: O(N*W)

Reason: There are N*W states therefore at max ‘N*W’ new problems will be solved.

Space Complexity: O(N*W) + O(N)

Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*W)).
***********TABULATION***
int helper(int idx,vector<int> weight,vector<int> value,int W,vector<vector<int>> &dp)
{
    //base case
    if(idx == 0)
    {
        if(weight[0] <= W)
            return value[0];
        else
            return 0;
    }
    
    if(dp[idx][W] != -1)
        return dp[idx][W];
    
    //do all stuffs
    int nottake = helper(idx-1,weight,value,W,dp);
    
    //take case. take the current ele and call on next item
    int take = INT_MIN; // as we need max value
    if(weight[idx] <= W)
       take = value[idx] + helper(idx-1,weight,value,W-weight[idx],dp);
    
    return dp[idx][W] = max(take,nottake);
}


int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
    vector<vector<int>> dp(n,vector<int>(maxWeight+1,0));
	//base case 
    for(int i=weight[0];i<=maxWeight;i++)
    {
        dp[0][i] = value[0];
    }
    
    for(int i=1;i<n;i++) //index
    {
        for(int j=0;j<=maxWeight;j++)  //weight
        {
              int nottake = dp[i-1][j];
              int take = -1e9;
              if(weight[i]<=j)
                take = value[i] + dp[i-1][j-weight[i]];
            
              dp[i][j] = max(take,nottake);
        }
    }
    
    return dp[n-1][maxWeight];
}



Time Complexity: O(N*W)

Reason: There are two nested loops

Space Complexity: O(N*W)

Reason: We are using an external array of size ‘N*W’. Stack Space is eliminated.



