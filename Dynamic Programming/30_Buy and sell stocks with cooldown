//https://www.codingninjas.com/codestudio/problems/highway-billboards_3125969

int func(vector<int> &prices,int i,int canBuy,vector<vector<int>> &dp)
{
       if(i>=prices.size())  // If we reach the end of the vector, return 0 as no further profit can be made.
        return 0;
    
    if(dp[i][canBuy] != -1)
        return dp[i][canBuy];
    
    int x,y;
    if(canBuy==1){ // if we can buy, we have these two options. Return the maximum of these two
        x=func(prices,i+1,0,dp)-prices[i];  
        y=func(prices,i+1,1,dp);
        return dp[i][canBuy] = max(x,y);
    }
    else{// if we can sell, we have these two options. Return the maximum of these two.
        x=prices[i]+func(prices,i+2,1,dp);
        y=func(prices,i+1,0,dp);
        return dp[i][canBuy] = max(x,y);
    }

}

int stockProfit(vector<int> &prices)
{
    vector<vector<int>> dp(prices.size(),vector<int>(2,-1));
    return func(prices,0,1,dp);
}


****** LEETCODE****
class Solution 
{
    int f(vector<int> &p,int ind,int buy,int n,vector<vector<int>> &dp)
    {
        if(ind >= n)
            return 0;
        
        if(dp[ind][buy] != -1)
            return dp[ind][buy];
        
        int op1=0;
        int op2=0;
        
        if(buy)
        {
            op1 = -p[ind] + f(p,ind+1,0,n,dp);  //buy
            op2 = 0 + f(p,ind+1,1,n,dp);  //don't buy
        }
        else
        {
            op1 = p[ind] + f(p,ind+2,1,n,dp);   //sell
            op2 = 0 + f(p,ind+1,0,n,dp);  //don't sell
        }
        
        return dp[ind][buy] = max(op1,op2);
    }

public:
    int maxProfit(vector<int>& prices) 
    {
        int n = prices.size();
        vector<vector<int>> dp(n,vector<int>(2,-1));
        return f(prices,0,1,n,dp);
    }
};
