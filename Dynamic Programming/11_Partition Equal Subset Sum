//https://www.codingninjas.com/codestudio/problems/partition-equal-subset-sum_892980?leftPanelTab=0

/*
Given an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.

Input: N = 4
arr = {1, 5, 11, 5}
Output: YES
Explaination: 
The two parts are {1, 5, 5} and {11}.

*/

******* MEMOIZATION ******
Time Complexity: O(N*K) + O(N)

Reason: There are N*K states therefore at max ‘N*K’ new problems will be solved and we are running a for loop for ‘N’ times to calculate the total sum

Space Complexity: O(N*K) + O(N)

Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*K)).



******** TABULATION***********

The array can be partitioned into two equal subsets

Time Complexity: O(N*K) +O(N)

Reason: There are two nested loops that account for O(N*K) and at starting we are running a for loop to calculate totSum.

Space Complexity: O(N*K)

Reason: We are using an external array of size ‘N*K’. Stack Space is eliminated.

bool subsetpartition(vector<int> &arr, int n,int k)
{
    vector<vector<bool>> dp(n+1,vector<bool>(k+1,false));
    //initialize the dp array
    for(int i=0;i<n+1;i++)
        dp[i][0] = true;
    
    if(arr[0]<=k)
        dp[0][arr[0]] = true;
    
    
    for(int idx=1;idx<n+1;idx++)
    {
        for(int target=1;target<k+1;target++)
        {
            bool nottake = dp[idx-1][target];
            
            bool take = false;
            if(arr[idx] <= target)
                take = dp[idx-1][target-arr[idx]] ;
            
            dp[idx][target] = take || nottake;
        }
    }
     return dp[n][k];
}


bool canPartition(vector<int> &arr, int n)
{
    //find sum of all elements
    int sum = 0;
    for(auto ele:arr)
        sum += ele;
    
    if(sum%2 != 0)
        return false;
    else 
        return subsetpartition(arr,n,sum/2);
}
