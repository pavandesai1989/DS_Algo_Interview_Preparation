//https://www.codingninjas.com/codestudio/problems/unbounded-knapsack_1215029?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos

********* recursion ******
int f(int idx,int w,vector<int> &profit,vector<int> &weight)
{
    //base case
    if(idx == 0)
    {
         return (int)(w/weight[0] * profit[0]);
    }

    //not take
    int N = f(idx-1,w,profit,weight);
    //take case
    int Y = 0;
    if(weight[idx] <= w)
        Y = profit[idx] + f(idx,w-weight[idx],profit,weight);
    
    return max(N,Y);
}


int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
   return f(n-1,w,profit,weight);
}
Time: exponential
space : O(weight ) ;;; as we go from w till 0

*************memoization *****

int f(int idx,int w,vector<int> &profit,vector<int> &weight,vector<vector<int>> &dp)
{
    //base case
    if(idx == 0)
         return (int)(w/weight[0] * profit[0]);

    if(dp[idx][w] != -1)
        return dp[idx][w];

    //not take
    int N = f(idx-1,w,profit,weight,dp);
    //take case
    int Y = 0;
    if(weight[idx] <= w)
        Y = profit[idx] + f(idx,w-weight[idx],profit,weight,dp);
    
    return dp[idx][w] = max(N,Y);
}


int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
   vector<vector<int>> dp(n,vector<int>(w+1,-1));
   return f(n-1,w,profit,weight,dp);
}

Time : O(n*w)
space : O(n*w) + O(w) stack space 


********************TABULATION*******
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
   vector<vector<int>> dp(n,vector<int>(w+1,0));
   
    //base case
    for(int T=0;T<=w;T++)
        dp[0][T] = (int)(T/weight[0] * profit[0]);

    for(int i=1;i<n;i++)
    {
        for(int j=0;j<=w;j++)
        {
             int N = dp[i-1][j];
             int Y = 0;
             
             if(weight[i] <= j)
                 Y = profit[i] + dp[i][j-weight[i]];
            
            dp[i][j] = max(Y,N);
        }
    }
    return dp[n-1][w];
}

Time : O(n*w)
Space : O(n*w)









