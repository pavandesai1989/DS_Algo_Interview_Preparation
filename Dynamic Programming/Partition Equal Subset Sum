//https://practice.geeksforgeeks.org/problems/subset-sum-problem2014/1#

/*
Given an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.

Input: N = 4
arr = {1, 5, 11, 5}
Output: YES
Explaination: 
The two parts are {1, 5, 5} and {11}.

*/

// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution{
public:
    bool isSubsetSum(int arr[],int n,int sum)
    {
        vector<vector<bool>> dp(n+1,vector<bool>(sum+1,false));
        
        for(int i=0;i<n+1;i++)
           dp[i][0] = true;
        
        for(int j=0;j<sum+1;j++)
           dp[0][j] = false;
        
        for(int i=1;i<n+1;i++) //array index
        {
            for(int j=1;j<sum+1;j++) //note its sum+1
            {
                if(arr[i-1] <= j)
                {
                    dp[i][j] = dp[i-1][j-arr[i-1]] || dp[i-1][j];
                }
                else
                    dp[i][j] = dp[i-1][j];
                
            }
        }
        
        return dp[n][sum];
    }
    int equalPartition(int N, int arr[])
    {
        int sum = 0;
        for(int i=0;i<N;i++)
           sum += arr[i];
        
        if(sum%2 !=0)
        {
            return false;
        }
        else
        {
            return isSubsetSum(arr,N,sum/2);
        }
           
    }
};

// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int arr[N];
        for(int i = 0;i < N;i++)
            cin>>arr[i];
        
        Solution ob;
        if(ob.equalPartition(N, arr))
            cout<<"YES\n";
        else
            cout<<"NO\n";
    }
    return 0;
}  // } Driver Code Ends
