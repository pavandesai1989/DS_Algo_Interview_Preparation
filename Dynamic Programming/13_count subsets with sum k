//https://www.codingninjas.com/codestudio/problems/number-of-subsets_3952532

***** RECURSION***
int f(int ind,int sum,vector<int>& arr)
{
    //base case
    if(sum ==0)
        return 1;
    if(ind ==0)
        return arr[ind] == sum;

    //pick case
    int pick = 0;
    if(arr[ind]<=sum)
        pick = f(ind-1,sum-arr[ind],arr,dp);
    
    int notpick = f(ind-1,sum,arr,dp);
    return  pick + notpick;
}




**** MEMOIZATION***
int f(int ind,int sum,vector<int>& arr,vector<vector<int>> &dp)
{
    //base case
    if(sum ==0)
        return 1;
    if(ind ==0)
        return arr[ind] == sum;
    
    if(dp[ind][sum] != -1)
        return dp[ind][sum];

    //pick case
    int pick = 0;
    if(arr[ind]<=sum)
        pick = f(ind-1,sum-arr[ind],arr,dp);
    
    int notpick = f(ind-1,sum,arr,dp);
    return dp[ind][sum] = pick + notpick;
}


******TABULATION*********
int findWays(vector<int> &num, int tar)
{
    int n = num.size();
    vector<vector<int>> dp(n,vector<int>(tar+1,0));
    
    for(int i=0;i<n;i++)
        dp[i][0] = 1;
    
    if(num[0]<=tar)
        dp[0][num[0]] = 1;
    
    for(int i=1;i<n;i++)
    {
        for(int j=1;j<tar+1;j++)
        {
            int notpick = dp[i-1][j];
            int pick = 0;
            if(num[i]<=j)
                pick = dp[i-1][j-num[i]];
            
            dp[i][j] = notpick + pick;
        }
    }
    
    return dp[n-1][tar];
}
