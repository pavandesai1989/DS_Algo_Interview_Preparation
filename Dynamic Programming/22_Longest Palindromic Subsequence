//https://www.codingninjas.com/codestudio/problems/longest-palindromic-subsequence_842787?leftPanelTab=0
**** code studio*****
#include<vector>
#include<algorithm>
int longestPalindromeSubsequence(string s)
{
    //1 based index
    int n1 = s.size();
    string t = s;
    reverse(t.begin(),t.end());
    int n2 = t.size();
    
    vector<vector<int>> dp(n1+1,vector<int>(n2+1,0));
    
    for(int i=1;i<=n1;i++)
    {
        for(int j=1;j<=n2;j++)
        {
            if(s[i-1] == t[j-1])
                dp[i][j] = 1 + dp[i-1][j-1];
            else
                dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
        }
    }
    
    return dp[n1][n2];
    
}

********leetcode*****
//https://leetcode.com/problems/longest-palindromic-subsequence/

class Solution {
public:
    int longestPalindromeSubseq(string s) 
    {
        string t = s;
        reverse(t.begin(),t.end());
        
        int n1=s.size();
        int n2=n1;
        
        vector<vector<int>> dp(n1+1,vector<int>(n1+1,0));
        
        for(int i=1;i<=n1;i++)
        {
            for(int j=1;j<=n2;j++)
            {
                //match 
                if(s[i-1] == t[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
            }
        }
        
        return dp[n1][n2];
    }
};
