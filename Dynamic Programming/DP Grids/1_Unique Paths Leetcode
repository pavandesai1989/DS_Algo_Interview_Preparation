//https://www.codingninjas.com/codestudio/problems/total-unique-paths_1081470?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos

********* recursion ******
#include <bits/stdc++.h> 

int helper(int i,int j)
{
      //base case 
    if( i == 0 && j == 0)// reached destination
        return 1;
    //handle boundary
    if(i<0 || j<0)
        return 0;
    
    //do stuffs on the index
    int left = helper(i,j-1); //left move row same and column redune
    int top = helper(i-1,j); //top move. row reduce and column same
    
    return left+top;  
}
int uniquePaths(int m, int n)
{
    return helper(m-1,n-1);
}

Time : O( 2 power(m+n))
Space : O(path length)  + o(m-1 * n-1) //stack space 

***************** MEMOIZATION***************
#include <bits/stdc++.h> 

int helper(int i,int j,vector<vector<int>> &dp)
{
      //base case 
    if( i == 0 && j == 0)// reached destination
        return 1;
    //handle boundary
    if(i<0 || j<0)
        return 0;
    
    if(dp[i][j] != -1)
        return dp[i][j];
    
    //do stuffs on the index
    int left = helper(i,j-1,dp); //left move row same and column redune
    int top = helper(i-1,j,dp); //top move. row reduce and column same
    
    return dp[i][j] = left+top;  
}
int uniquePaths(int m, int n)
{
    vector<vector<int>> dp(m,vector<int>(n,-1));
    return helper(m-1,n-1,dp);
}

Time : O(m*n)
Space : O(m*n) + O((m-1) + (n-1) 

*****************TABULATION ********************
#include <bits/stdc++.h> 

int uniquePaths(int m, int n)
{
    vector<vector<int>> dp(m,vector<int>(n,-1));
    
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            if( i==0 && j==0)
            {
                dp[i][j] = 1;
                continue;
            }
            
            int left = 0;
            int top = 0;
            
            if(j > 0)
                 left = dp[i][j-1];
            
            if(i > 0)
                top = dp[i-1][j];
            
            dp[i][j] = left + top;
                
        }
    }
    return dp[m-1][n-1]; //as we have matrix of m*n
}

Time: O(m*n)
Space : O(m*n)



