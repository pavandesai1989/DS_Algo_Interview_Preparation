//https://www.codingninjas.com/codestudio/problems/ninja-s-training_3621003

******* RECURSION****
int  f(int day,int last,vector<vector<int>> &p)
{
    if(day == 0)
    {
        int mx = 0;
        for(int i=0;i<=2;i++)
        {
            if(i!=last)
               mx = max(mx,p[day][i]); 
        }
        return mx;
    }
    
    int maxi = 0;
    for(int i=0;i<=2;i++)
    {
        if(i!=last)
        {
            int acti = p[day][i] + f(day-1,i,p);
            maxi = max(maxi,acti);
        }
    }
    
    return maxi;
}

int ninjaTraining(int n, vector<vector<int>> &points)
{
    return f(n-1,3,points);
}

**** MEMOIZATION****
int  f(int day,int last,vector<vector<int>> &p,vector<vector<int>> &dp)
{
    if(dp[day][last] != -1)
        return dp[day][last];
    
    if(day == 0)
    {
        int mx = 0;
        for(int i=0;i<=2;i++)
        {
            if(i!=last)
               mx = max(mx,p[day][i]); 
        }
        return dp[day][last] = mx;
    }
    
    int maxi = 0;
    for(int i=0;i<=2;i++)
    {
        if(i!=last)
        {
            int acti = p[day][i] + f(day-1,i,p,dp);
            maxi = max(maxi,acti);
        }
    }
    
    return dp[day][last] = maxi;
}

int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>> dp(n,vector<int>(4,-1));
    return f(n-1,3,points,dp);
}


*********TABULATION*****
int ninjaTraining(int n, vector < vector < int > > & points) {

  vector < vector < int > > dp(n, vector < int > (4, 0));

  dp[0][0] = max(points[0][1], points[0][2]);
  dp[0][1] = max(points[0][0], points[0][2]);
  dp[0][2] = max(points[0][0], points[0][1]);
  dp[0][3] = max(points[0][0], max(points[0][1], points[0][2]));

  for (int day = 1; day < n; day++) {
    for (int last = 0; last < 4; last++) {
      dp[day][last] = 0;
      for (int task = 0; task <= 2; task++) {
        if (task != last) {
          int activity = points[day][task] + dp[day - 1][task];
          dp[day][last] = max(dp[day][last], activity);
        }
      }
    }

  }

  return dp[n - 1][3];
}
