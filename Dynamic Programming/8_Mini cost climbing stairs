//https://leetcode.com/problems/min-cost-climbing-stairs/

******** recursion*****
class Solution {
private:
    int helper(int idx,vector<int> &cost)
    {
       if( idx <= 0) //if use only == stack ooverflow
           return 0;
        
        int op1 = helper(idx-1,cost);
        int op2 = helper(idx-2,cost);
        
        return min(op1,op2) + cost[idx];
    }
public:
    int minCostClimbingStairs(vector<int>& cost) 
    {
        int idx = cost.size();
        return min(helper(idx-1,cost),helper(idx-2,cost));
    }
};

******** memoization******

class Solution {
private:
    int helper(int idx,vector<int> &cost,vector<int> &dp)
    {
       if( idx <= 0)
           return 0;
        
        if(dp[idx] != -1)
            return dp[idx];
        
        int op1 = helper(idx-1,cost,dp);
        int op2 = helper(idx-2,cost,dp);
        
        return dp[idx]=min(op1,op2) + cost[idx];
    }
public:
    int minCostClimbingStairs(vector<int>& cost) 
    {

        int n = cost.size();
        vector<int> dp(n,-1);
        return min(helper(n-1,cost,dp),helper(n-2,cost,dp));
    }
};

********** Tabulation*****
class Solution {
private:
    int helper(int idx,vector<int> &cost,vector<int> &dp)
    {
       if( idx <= 0)
           return 0;
        
        if(dp[idx] != -1)
            return dp[idx];
        
        int op1 = helper(idx-1,cost,dp);
        int op2 = helper(idx-2,cost,dp);
        
        return dp[idx]=min(op1,op2) + cost[idx];
    }
public:
    int minCostClimbingStairs(vector<int>& cost) 
    {
        int n = cost.size();
        vector<int> dp(n+1,0);
        
        //base case
        dp[0] = cost[0];
        dp[1] = cost[1];
        
        for(int i=2;i<n;i++)
        {
            dp[i] = cost[i] + min(dp[i-1],dp[i-2]);
        }
        
        return min(dp[n-1],dp[n-2]);;
    }
};
