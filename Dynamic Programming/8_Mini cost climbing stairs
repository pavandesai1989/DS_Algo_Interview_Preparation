//https://leetcode.com/problems/min-cost-climbing-stairs/

******** recursion*****
class Solution {
    
    public:
    int helper(int i,vector<int> &cost)
    {
        if( i >= cost.size())
              return 0;
        
        int op1 = helper(i+1,cost,dp);
        int op2 = helper(i+2,cost,dp);
        
        return min(op1,op2) + cost[i];
    }
public:
    int minCostClimbingStairs(vector<int>& cost) 
    {
        return min(helper(0,cost),helper(1,cost));
    }
};

******** memoization******

class Solution {
private:
class Solution {
    
    public:
    int helper(int i,vector<int> &cost,vector<int> &dp)
    {
        if( i >= cost.size())
              return 0;
        
        if(dp[i]!=-1)
            return dp[i];
        
        int op1 = helper(i+1,cost,dp);
        int op2 = helper(i+2,cost,dp);
        
        return dp[i] = min(op1,op2) + cost[i];
    }
public:
    int minCostClimbingStairs(vector<int>& cost) 
    {
        vector<int> dp(1001,-1);
        return min(helper(0,cost,dp),helper(1,cost,dp));
    }
};

********** Tabulation*****
int minCostClimbingStairs(vector<int>& cost) 
    {
        int n = cost.size();
        vector<int> dp(n+2,0);
        
        dp[n] = 0;
        dp[n+1] = 0;
        
        for(int i=n-1;i>=0;i--)
        {
            dp[i] = min(dp[i+1],dp[i+2]) + cost[i];
        }
        return min(dp[0],dp[1]);
    }
