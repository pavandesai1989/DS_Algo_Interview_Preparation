//https://leetcode.com/problems/min-cost-climbing-stairs/

code help

******** recursion*****
class Solution {
public:
    int solve(int idx,vector<int>& cost)
    {
        if(idx == 0)
            return cost[0];
        
        if(idx == 1)
            return cost[1];
        
        return cost[idx] + min(solve(idx-1,cost),solve(idx-2,cost));
    }
    
    int minCostClimbingStairs(vector<int>& cost) 
    {
        int n = cost.size();
        int ans = min(solve(n-1,cost),solve(n-2,cost));
        return ans;
    }
};

******** memoization******
class Solution {
public:
    int solve(int idx,vector<int>& cost,vector<int> &dp)
    {         
        if(dp[idx] != -1)
            return dp[idx];
        
        if(idx == 0)
            return dp[idx] = cost[0];
        
        if(idx == 1)
            return dp[idx] = cost[1];
        
        return dp[idx] = cost[idx] + min(solve(idx-1,cost,dp),solve(idx-2,cost,dp));
    }
    
    int minCostClimbingStairs(vector<int>& cost) 
    {
        int n = cost.size();
        vector<int> dp(n+1,-1);
        
        int ans = min(solve(n-1,cost,dp),solve(n-2,cost,dp));
        return ans;
    }
};



********** Tabulation*****
    int minCostClimbingStairs(vector<int>& cost) 
    {
        int n = cost.size();
        vector<int> dp(n+1,-1);
        
        //base case
        dp[0] = cost[0];
        dp[1] = cost[1];
        
        for(int i=2;i<n;i++)
        {
            dp[i] = min(dp[i-1],dp[i-2]) + cost[i];
        }
        return min(dp[n-1],dp[n-2]);
    }
