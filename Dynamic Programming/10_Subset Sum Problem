//https://practice.geeksforgeeks.org/problems/subset-sum-problem-1611555638/1/

//https://www.codingninjas.com/codestudio/problems/subset-sum-equal-to-k_1550954?leftPanelTab=1

/*

Given an array of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum. 

Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 9
Output: 1 
Explanation: Here there exists a subset with
sum = 9, 4+3+2 = 9.


*/


************ RECURSION ************
//Time : o(2 power (n)). //each level has 2 choices
//space : o(n) + o(n) --> stack space 

bool helper(int idx,int target,vector<int> &arr)
{
    if(target==0)
        return true;
    
    if(idx == 0)
        return ( arr[0] == target);
    
    bool take = false;
    bool nottake = helper(idx-1,target,arr);
    
    //pick the last element. before that check if its less than the target
    if(arr[idx] <= target)
         take = helper(idx-1,target-arr[idx],arr);

    return take | nottake;
        
}


bool subsetSumToK(int n, int k, vector<int> &arr) 
{
    return helper(n-1,k,arr);  //note call is n-1
}




**************************MEMOIZATION********
Time Complexity: O(N*K)

Reason: There are N*K states therefore at max ‘N*K’ new problems will be solved.

Space Complexity: O(N*K) + O(N)

Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*K)).

bool helper(int idx,int target,vector<int> &arr,vector<vector<int>> &dp)
{
    if(target==0)
        return true;
    
    if(idx == 0)
        return ( arr[0] == target);
    
    if(dp[idx][target] != -1)
        return dp[idx][target];
        
    bool take = false;
    bool nottake = helper(idx-1,target,arr,dp);
    
    //pick the last element. before that check if its less than the target
    if(arr[idx] <= target)
         take = helper(idx-1,target-arr[idx],arr,dp);

    return dp[idx][target] =  take | nottake;
        
}


bool subsetSumToK(int n, int k, vector<int> &arr) 
{
    vector<vector<int>> dp(n+1,vector<int>(k+1,-1));
    return helper(n-1,k,arr,dp);
}


**********************TABUALTION *********

Time Complexity: O(N*K)

Reason: There are two nested loops

Space Complexity: O(N*K)

Reason: We are using an external array of size ‘N*K’. Stack Space is eliminated.

bool subsetSumToK(int n, int k, vector<int> &arr) 
{
    vector<vector<bool>> dp(n+1,vector<bool>(k+1,false));
    
    //initialize the dp array
    for(int i=0;i<n+1;i++)
        dp[i][0] = true;
    
    if(arr[0]<=k)
        dp[0][arr[0]] = true;
    
    
    for(int idx=1;idx<n+1;idx++)
    {
        for(int target=1;target<k+1;target++)
        {
            bool nottake = dp[idx-1][target];
            
            bool take = false;
            if(arr[idx] <= target)
                take = dp[idx-1][target-arr[idx]] ;
            
            dp[idx][target] = take || nottake;
        }
    }

    return dp[n][k];
}
