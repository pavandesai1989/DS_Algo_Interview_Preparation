//https://www.codingninjas.com/codestudio/problems/longest-common-subsequence_624879?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=1
******MEMOIZATION*********
#include<vector>
int f(int n1,int n2,string s,string t,vector<vector<int>> &dp)
{
    if(n1<0 || n2<0)
        return 0;
    
    if(dp[n1][n2] != -1)
        return dp[n1][n2];
    
    //match
    if(s[n1] == t[n2])
        return dp[n1][n2] = 1 + f(n1-1,n2-1,s,t,dp);
    
    //no match 
    return dp[n1][n2] = max(f(n1-1,n2,s,t,dp),f(n1,n2-1,s,t,dp));
}


int lcs(string s, string t)
{
	int n1 = s.size();
    int n2 = t.size();
    
    vector<vector<int>> dp(n1,vector<int>(n2,-1));
    
    return f(n1-1,n2-1,s,t,dp);
}

********TABULATION*****
int lcs(string s, string t)
{
	int n1 = s.size();
    int n2 = t.size();
    
    vector<vector<int>> dp(n1+1,vector<int>(n2+1,0));
    
    for(int i=1;i<=n1;i++)
    {
        for(int j=1;j<=n2;j++)
        {
            if(s[i-1] == t[j-1])
                dp[i][j] = 1 + dp[i-1][j-1];
            else
                dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
        }
    }
    
    return dp[n1][n2];

}
