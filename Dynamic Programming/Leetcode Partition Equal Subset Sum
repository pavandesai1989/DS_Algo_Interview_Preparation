#include<vector>

class Solution {
private:
bool helper(vector<int> &nums,int n,int sum)
{
    vector<vector<bool>> dp(n+1,vector<bool>(sum+1,false)); //initialize all ele to -1
    
    for(int i=0;i<n+1;i++)
        dp[i][0] = true;
        
    for(int j=0;j<sum+1;j++)
        dp[0][j] = false;
    
    for(int i=1;i<n+1;i++)
    {
        for(int j=1;j<sum+1;j++)
        {
            if(nums[i-1]<=j)
            {
                dp[i][j] = dp[i-1][j-nums[i-1]] || dp[i-1][j]; 
            }
            else
                dp[i][j] = dp[i-1][j];
        }
    }
    
    return dp[n][sum];
        
}
    
public:
    bool canPartition(vector<int>& nums) 
    {
        int n = nums.size();
        int sum = 0;
        
        for(auto ele:nums)
            sum +=ele;
        
        if(sum%2 != 0) //if sum is odd we cannot divide in to 2 equal parts!!
            return false;
        else
            return helper(nums,n,sum/2);
    }
};
