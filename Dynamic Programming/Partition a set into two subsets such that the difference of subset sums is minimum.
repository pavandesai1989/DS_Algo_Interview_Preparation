#include <bits/stdc++.h>

********* using array of size n+1 and sum +1 *********
int minSubsetSumDifference(vector<int>& nums, int n)
{
       // Write your code here.         int n=nums.size();
        int sum=0;
        for(int i=0; i<n; i++)
            sum+=nums[i]; //to get the range for matrix and answer
    
       vector<vector<bool>> dp(n+1,vector<bool> (sum+1,false));
    
       for(int i=0;i<n+1;i++)
           dp[i][0] = true; //rest all are false
       
       for(int j=0;j<sum+1;j++)
       {
           if( j == nums[0])
               dp[0][j] = true;
       }
        
        for(int i=1; i<n+1; i++)
        {
            for(int j=1; j<sum+1; j++)
            {
                int take = 0;
                int nottake = dp[i-1][j];;
                
                if(nums[i]<=j)
                    take = dp[i-1][j-nums[i]];
                
                dp[i][j] = take || nottake;
             }
         }
    
    // we need only last row of the matrix 
    
       int diff = 1e9;
       for (int j = 0; j<=sum/2; j++) 
       {
           int first=j;
           int second=sum-j;
            if (dp[n-1][j] == true && diff>abs(first-second)) 
                diff=abs(first-second);
        }

        return diff;  
}


*********** using array of size n and sum+1********
    // we need only last row of the matrix 
    
       int diff = 1e9;
       for (int j = 0; j<=sum/2; j++) 
       {
           int first=j;
           int second=sum-j;
            if (dp[n][j] == true && diff>abs(first-second)) 
                diff=abs(first-second);
        }

        return diff; 



