//https://www.codingninjas.com/codestudio/problems/best-time-to-buy-and-sell-stock_1080698?leftPanelTab=1
//https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/

********MEMOIZATION*****
int f(int ind,int buy,vector<int> &p,int n,int k, vector<vector<vector<int>>> &dp)
{
    if(ind==n)
        return 0;
    if(k==0)
        return 0;
    
    if(dp[ind][buy][k] != -1)
        return dp[ind][buy][k];
    
    int profit = 0;
    
    if(buy)
    {
        int buy = -p[ind] + f(ind+1,0,p,n,k,dp);
        int nobuy = 0 + f(ind+1,1,p,n,k,dp);
        
        profit = max(buy,nobuy);
    }
    else
    {
        int sell = p[ind] + f(ind+1,1,p,n,k-1,dp);
        int nosell = 0 + f(ind+1,0,p,n,k,dp);
        
        profit = max(sell,nosell);
    }
    
    return dp[ind][buy][k] = profit;
}


int maximumProfit(vector<int> &prices, int n, int k)
{
    
    vector<vector<vector<int>>> dp(n,vector<vector<int>> (2,vector<int>(k+1,-1)));
    return f(0,1,prices,n,k,dp);
}
******* LEETCODE*****
class Solution {
    int f(int ind,int buy,int k,vector<int> &p,int n,vector<vector<vector<int>>> &dp)
    {
        //base case
        if(ind == n)
            return 0;
        if(k == 0)
            return 0;
        
        if(dp[ind][buy][k] != -1)
            return dp[ind][buy][k];
        
        int profit = 0;
        
        if(buy)
        {
            int buy = -p[ind] + f(ind+1,0,k,p,n,dp);
            int nobuy = 0 + f(ind+1,1,k,p,n,dp);
            profit = max(buy,nobuy);
        }
        else
        {
            int sell = p[ind] + f(ind+1,1,k-1,p,n,dp);
            int nosell = 0 + f(ind+1,0,k,p,n,dp);
            
            profit = max(sell,nosell);
        }
        
        return dp[ind][buy][k] = profit;
    }
public:
    int maxProfit(int k, vector<int>& prices) 
    {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n,vector<vector<int>> (2,vector<int>(k+1,-1)));
        
        return f(0,1,k,prices,n,dp);
    }
};
