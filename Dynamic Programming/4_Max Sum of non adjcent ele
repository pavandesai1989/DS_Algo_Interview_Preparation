//https://www.codingninjas.com/codestudio/problems/maximum-sum-of-non-adjacent-elements_843261?leftPanelTab=0

//https://leetcode.com/problems/house-robber/

********* Recursion***********
int f(int idx,vector<int> &nums)
{
   //base case
    if(idx == 0)
        return nums[0];
    
    if(idx < 0)
        return 0;
    int notpick = f(idx-1,nums);
    //not allowed : adjecent ele so calling on idx-2
    int pick = nums[idx] + f(idx-2,nums);
   
    return max(pick,notpick);
}

int maximumNonAdjacentSum(vector<int> &nums)
{
    int n = nums.size();
    return (f(n-1,nums));
}

********** Memoization *************
int f(int idx,vector<int> &nums,vector<int> &dp)
{
   //base case
    if(idx == 0)
        return nums[0];
    
    if(idx < 0)
        return 0;
    
    if(dp[idx] != -1)
        return dp[idx];
    
    int notpick = f(idx-1,nums,dp);
    //not allowed : adjecent ele so calling on idx-2
    int pick = nums[idx] + f(idx-2,nums,dp);
   
    return dp[idx] = max(pick,notpick);
}

int maximumNonAdjacentSum(vector<int> &nums)
{
    int n = nums.size();
    vector<int> dp(n,-1);
    return f(n-1,nums,dp);
}

************TABULATION*********
int maximumNonAdjacentSum(vector<int> &nums)
{
    int n = nums.size();
    vector<int> dp(n,0);
    //base case
    dp[0] = nums[0];
    for(int i=1;i<n;i++)
    {
        int take = nums[i];
        if(i>1)
            take +=dp[i-2];
        int nottake = dp[i-1];
        
        dp[i] = max(take,nottake);
    }
    
    return dp[n-1];
}

Time Complexity: O(N)

Reason: We are running a simple iterative loop

Space Complexity: O(N)

Reason: We are using an external array of size ‘n+1’.


****** LEETCODE ***
#include<bits/stdc++.h>

class Solution {
public:
    int rob(vector<int>& nums) 
    {
        if(nums.size() == 1) return nums[0];
        vector<int> dp(nums.size());
        
        //base case
        dp[0] = nums[0]; //we reached dest
        dp[1] = max(nums[1],nums[0]);
        for(int i=2;i<nums.size();i++)
          dp[i] = max(dp[i-1],nums[i] + dp[i-2]);

        return dp[nums.size()-1];
    }
};

     





