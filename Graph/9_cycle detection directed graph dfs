//https://practice.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    bool dfs(int node,vector<int> &visi,vector<int> &pathvisi,vector<int> adj[])
    {
        visi[node] = 1;
        pathvisi[node] = 1;
        
        for(auto it:adj[node])
        {
            if(!visi[it])
              {
                  if(dfs(it,visi,pathvisi,adj))
                     return true;
              }
              else if(visi[it] && pathvisi[it])
              {
                  return true;
              }
        }
        pathvisi[node] = 0;
        return false;
    }
    
    bool isCyclic(int V, vector<int> adj[]) 
    {
        vector<int> visi(V,0);
        vector<int> pathvisi(V,0);
        
        for(int i=0;i<V;i++)
        {
            if(!visi[i])
            {
                if(dfs(i,visi,pathvisi,adj))
                   return true;
                
            }
        }
        return false;
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}

// } Driver Code Ends
