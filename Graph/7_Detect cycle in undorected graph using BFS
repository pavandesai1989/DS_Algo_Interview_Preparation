//https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1

//https://leetcode.com/problems/course-schedule/

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
  bool dfs(int src,vector<int> adj[],int visi[])
  {
      visi[src] = 1;
      queue<pair<int,int>> q;
      q.push({src,-1});
      
      while(!q.empty())
      {
          int n = q.front().first;  //parent
          int parent = q.front().second;
          q.pop();
          
          for(auto ele:adj[n])
          {
              if(!visi[ele])
              {
                  visi[ele] = 1;
                  q.push({ele,n});
              }
              else if (parent!=ele)
              {
                  return true;
              }
          }
      }
      return false;
  }
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[])
    {
        int visi[V] = {0};
        
        for(int i=0;i<V;i++)
        {
            if(!visi[i])
             {
                 if(dfs(i,adj,visi))
                    return true;
             }
        }
        return false;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends
