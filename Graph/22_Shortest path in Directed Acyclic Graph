//https://practice.geeksforgeeks.org/problems/shortest-path-in-undirected-graph/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=direct-acyclic-graph

//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
#include<stack>
class Solution {
  public:
     void dfs(int n,vector<pair<int,int>> adj[],vector<int> &visi,stack<int> &st)
     {
         visi[n] = 1;
         
         for(auto it:adj[n])
         {
             int node = it.first;
             if(!visi[node])
                dfs(node,adj,visi,st);
         }
         
         st.push(n);
     }
     
    vector<int> shortestPath(int N,int M, vector<vector<int>>& edges)
    {
        //create a graph
        vector<pair<int,int>> adj[N];
        for(int i=0;i<M;i++)
        {
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            
            adj[u].push_back({v,wt});
        }
        
        //do the toplological sort
        vector<int> visi(N,0);
        stack<int> st;
        
        for(int i=0;i<N;i++)
        {
            if(!visi[i])
              dfs(i,adj,visi,st);
        }
        
        vector<int> dist(N,1e9);
        dist[0] = 0;
        
        while(!st.empty())
        {
            int tp = st.top();
            st.pop();
            
            for(auto it:adj[tp])
            {
                int adjnode = it.first;
                int weight = it.second;
                
                if(dist[tp] + weight < dist[adjnode])
                {
                    dist[adjnode] = dist[tp] + weight;
                    
                }
            }
        }
        
        vector<int> res(N,-1);
        for(int i=0;i<N;i++)
        {
            if(dist[i] != 1e9)
               res[i] = dist[i];
        }
        
        return res;
    }
};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        for(int i=0; i<m; ++i){
            vector<int> temp;
            for(int j=0; j<3; ++j){
                int x; cin>>x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }
        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        for (auto x : res) {
            cout << x << " ";
        }
        cout << "\n";
    }
}

// } Driver Code Ends
