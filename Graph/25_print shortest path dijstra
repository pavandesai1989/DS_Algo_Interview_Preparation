//https://practice.geeksforgeeks.org/problems/shortest-path-in-weighted-undirected-graph/1


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) 
    {
        //create the graph
        vector<pair<int,int>> adj[n+1];
        for(auto ele:edges)
        {
            adj[ele[0]].push_back({ele[1],ele[2]});
            adj[ele[1]].push_back({ele[0],ele[2]});
        }
        
        vector<int> dist(n+1,1e9); //1 based indexing
        vector<int> parent(n+1);
        for(int i=1;i<=n;i++)
        {
            parent[i] = i;
        }
        
        priority_queue< pair<int,int>,
                        vector<pair<int,int>>,
                        greater<pair<int,int>>> pq;
        dist[1] = 0;   
        pq.push({0,1});
        
        while(!pq.empty())
        {
            auto it = pq.top();
            int node = it.second;
            int dis = it.first;
            pq.pop();
            
            for(auto it:adj[node])
            {
                int adjnode = it.first;
                int edw = it.second;
                
                if(dis+edw < dist[adjnode])
                {
                    dist[adjnode] = dis + edw;
                    pq.push({dist[adjnode],adjnode});
                    
                    //store the parent 
                    parent[adjnode] = node;
                }
            }
        }
        
        if(dist[n] == 1e9)
           return {-1};
           
        vector<int> res;
        int node = n;
        while(parent[node] != node)
        {
            res.push_back(node);
            node = parent[node];
        }
        res.push_back(1);
        
        reverse(res.begin(),res.end());
        return res;
                        
    }
};

//{ Driver Code Starts.
int main() {
    // your code goes here
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        for (int i = 0; i < m; ++i) {
            vector<int> temp;
            for (int j = 0; j < 3; ++j) {
                int x;
                cin >> x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }

        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        for (auto x : res) {
            cout << x << " ";
        }
        cout << "\n";
    }
}

// } Driver Code Ends
