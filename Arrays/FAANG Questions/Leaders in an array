//https://practice.geeksforgeeks.org/problems/leaders-in-an-array-1587115620/1?page=1&difficulty[]=0&category[]=Arrays&curated[]=1&curated[]=2&sortBy=submissions
//https://www.codingninjas.com/codestudio/problems/leaders-in-an-array_873144?leftPanelTab=1

**** BRUTE FORCE***
//{ Driver Code Starts
// C++ program to remove recurring digits from
// a given number
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
    

class Solution{
    //Function to find the leaders in the array.
    public:
    vector<int> leaders(int a[], int n)
    {
       vector<int> res;
       bool bleader=true;
       for(int i=0;i<n;i++)
       {
           for(int j=i+1;j<n;j++)
           {
               if(a[j] > a[i])
               {
                   bleader = false;
                   break;
               }
                  
           }
           if(bleader)
             res.push_back(a[i]);
             
             bleader=true;
       }
       return res;
        
    }
};

//{ Driver Code Starts.

int main()
{
   long long t;
   cin >> t;//testcases
   while (t--)
   {
       long long n;
       cin >> n;//total size of array
        
        int a[n];
        
        //inserting elements in the array
        for(long long i =0;i<n;i++){
            cin >> a[i];
        }
        Solution obj;
        //calling leaders() function
        vector<int> v = obj.leaders(a, n);
        
        //printing elements of the vector
        for(auto it = v.begin();it!=v.end();it++){
            cout << *it << " ";
        }
        
        cout << endl;

   }
}

// } Driver Code Ends

**** OPTIMAL********

vector<int> findLeaders(vector<int> &a, int n) 
{
        vector<int> res;
       int max_right=a[n-1];
       res.push_back(max_right);
       
       for(int i=n-2;i>=0;i--)
       {
           if(a[i] > max_right)
           {
               max_right = a[i];
               res.push_back(max_right);
           }
       }
        reverse(res.begin(),res.end());    //takes o(nlogn)
        return res;
}

******** STACK o(n) Time and o(n) space********
#include<stack>
vector<int> findLeaders(vector<int> &a, int n) 
{
     vector<int> res;
     stack<int> st;
     st.push(a[n-1]);
    
     for(int i=n-1;i>=0;i--)
     {
        if(a[i] > st.top())
            st.push(a[i]);
     }
    
    while(!st.empty())
    {
        res.push_back(st.top());
        st.pop();
    }
    return res;
}


