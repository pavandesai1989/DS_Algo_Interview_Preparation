//https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
TreeNode* helper(vector<int>& postOrder,int poststart,int postend,vector<int>& inOrder,int instart,int inend,map<int,int> &inmap)
{
    if(poststart > postend || instart > inend)
        return NULL;
    
    //create a root
    TreeNode* root = new TreeNode(postOrder[postend]);
    
    //locate this in in order
    int inroot = inmap[root->val];
    int numsleft = inroot - instart;
    
    //create left tree
    root->left = helper(postOrder,poststart,poststart+numsleft-1,inOrder,instart,inroot-1,inmap);
    
    //create right
    root->right = helper(postOrder,poststart+numsleft,postend-1,inOrder,inroot+1,inend,inmap);
    
    return root;
}
    
public:
    TreeNode* buildTree(vector<int>& inOrder, vector<int>& postOrder) 
    {
    map<int,int> inmap;
    for(int i=0;i<inOrder.size();i++)
        inmap[inOrder[i]] = i;
    
    TreeNode* root = helper(postOrder,0,postOrder.size()-1,inOrder,0,inOrder.size()-1,inmap);
    return root;
    }
};
