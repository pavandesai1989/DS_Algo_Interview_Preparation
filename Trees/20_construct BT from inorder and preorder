//https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
TreeNode* helper(vector<int>& preorder,int prestart,int preend,vector<int>& inorder,int instart,int                   inend,map<int,int>& inmap)   
{
    //base case
    if(prestart > preend || instart > inend)
        return NULL;
    
    //create a root
    TreeNode* root = new TreeNode(preorder[prestart]);
    
    //locate this root in the inorder
    int inroot = inmap[root->val];
    //check num of ele to the left of root in the in order
    int numsleft = inroot-instart;
    
    //build left tree
    root->left = helper(preorder,prestart+1,prestart+numsleft,inorder,instart,inroot-1,inmap);
    
    //build right tree
    root->right = helper(preorder,prestart+1+numsleft,preend,inorder,inroot+1,inend,inmap);
    
    return root;
}
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        map<int,int> inmap;
        for(int i=0;i<inorder.size();i++)
            inmap[inorder[i]] = i;
        
        TreeNode* root = helper(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,inmap);
        return root;
    }
};
