//https://leetcode.com/problems/invert-binary-tree/
****** Iterative*********
Time  : o(n)
Space : o(n)

#include<algorithm>
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void swap(TreeNode* curr)
    {
        if(!curr)
            return;
        
        swap(curr->left);
        swap(curr->right);
        
        //swap the nodes
        TreeNode* temp;
        temp = curr->left;
        curr->left = curr->right;
        curr->right = temp;
    }
public:
    TreeNode* invertTree(TreeNode* root) 
    {
        stack<TreeNode*> st;
        st.push(root);
        
        while(!st.empty())
        {
            TreeNode* curr = st.top();
            st.pop();
            
            if(!curr) continue;
            if(curr->left)
                st.push(curr->left);
            if(curr->right)
                st.push(curr->right);
            
            TreeNode* temp = curr->left;
            curr->left = curr->right;
            curr->right = temp;
        }
        return root;
    }
};

*********** RECURSION*******
Time : o(n)
space : o(H)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void swap(TreeNode* curr)
    {
        if(!curr)
            return;
        
        swap(curr->left);
        swap(curr->right);
        
        //swap the nodes
        TreeNode* temp;
        temp = curr->left;
        curr->left = curr->right;
        curr->right = temp;
    }
public:
    TreeNode* invertTree(TreeNode* root) 
    {
        swap(root);
        return root;
    }
};
