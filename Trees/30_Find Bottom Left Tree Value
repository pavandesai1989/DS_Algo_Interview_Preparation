//https://leetcode.com/problems/find-bottom-left-tree-value/


******* BFS****
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) 
    {
        if(!root->left && !root->right) return root->val;
        
        int ans;
        queue<TreeNode*> q;
        q.push(root);
        
        while(!q.empty())
        {
            int n = q.size();
            for(int i=0;i<n;i++)
            {
                TreeNode* f = q.front();
                q.pop();
                
                if(i == 0)
                    ans = f->val;
                
                if(f->left)
                    q.push(f->left);
                
                if(f->right)
                    q.push(f->right);
            }
            
        }
        
        return ans;

    }
};






********

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void find(TreeNode* root,vector<int> &res,int lvl,int &ans)
    {
        if(!root) return ;
        
        if(res.size() == lvl)
        {
            res.push_back(root->val);
            ans = root->val;
        }
        find(root->left,res,lvl+1,ans);
        find(root->right,res,lvl+1,ans);
    }
public:
    int findBottomLeftValue(TreeNode* root) 
    {
        vector<int> res;
        if(!root->left && !root->right) return root->val;
        
        int ans;
        find(root,res,0,ans);
        return ans;
    }
};
