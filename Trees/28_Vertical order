//https://www.codingninjas.com/codestudio/problems/vertical-order-traversal_920533?leftPanelTab=1

//https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/submissions/



******** LEETCODE *****
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) 
    {
        vector<vector<int>> res;
        if(!root) return res;
         
        map<int,map<int,multiset<int>>> m;   //horizontal distance, level,number of nodes
        queue<pair<TreeNode*,pair<int,int>>> q;  //node,horizontal distance, level
        
        //push the root to queue
        q.push(make_pair(root,make_pair(0,0)));
        
        while(!q.empty())
        {
            //take the front ele 
            auto f = q.front();
            q.pop();
            
            TreeNode* fnode = f.first;
            //get the hori distance 
            int hd = f.second.first;
            //get the level
            int lvl = f.second.second;
            
            //insert in mao
            m[hd][lvl].insert(fnode->val);
            
            if(fnode->left)
                q.push(make_pair(fnode->left,make_pair(hd-1,lvl+1)));
            
            if(fnode->right)
                q.push(make_pair(fnode->right,make_pair(hd+1,lvl+1)));
        }
        
        for(auto it1:m)
        {
            vector<int> temp;
            for(auto it2:it1.second)
            {
                for(auto val:it2.second)
                {
                    temp.push_back(val);
                }
            }
            res.push_back(temp);
        }
        
        return res;
    }
};





************************


#include<queue>
#include<vector>
#include<map>
/************************************************************

Following is the Binary Tree node class
    
template <typename T = int>
class TreeNode
{
public:
    T data;
    TreeNode<T> *left;
    TreeNode<T> *right;

    TreeNode(T val)
    {
        this->data = val;
        left = NULL;
        right = NULL;
    }

    ~TreeNode()
    {
        if (left != NULL)
        {
            delete left;
        }
        if (right != NULL)
        {
            delete right;
        }
    }
};

************************************************************/

vector<int> verticalOrderTraversal(TreeNode<int> *root)
{
    vector<int> res;
    if(!root)
        return res;
    
    map<int,map<int,vector<int>>  >  nodes;
    queue< pair<TreeNode<int>*,pair<int,int> > > q;   //hori distance,level
    
    //push the root node
    q.push(make_pair(root,make_pair(0,0)));
    
    while(!q.empty())
    {
        pair<TreeNode<int>*,pair<int,int> >  f = q.front();
        q.pop();
        
        TreeNode<int>* fnode = f.first;
        //take the hori distance and the level
        int hd = f.second.first;
        int lvl = f.second.second;
        
        //add in the map
        nodes[hd][lvl].push_back(fnode->data);
        
        if(fnode->left)
            q.push( make_pair(fnode->left,make_pair(hd-1,lvl+1) )  );
        
        if(fnode->right)
            q.push( make_pair(fnode->right,make_pair(hd+1,lvl+1) )  );
        
    }
    
    for(auto i:nodes)  //map<int,pair<int,vector<int>>>
    {
        for(auto j:i.second) //pair<int,vector<int>>
        {
            for(auto k:j.second)
            {
                res.push_back(k);
            }
        }
    }
    
    return res;

}
