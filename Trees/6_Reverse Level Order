//https://leetcode.com/problems/binary-tree-level-order-traversal-ii/

******** Approach 1 using the stack******
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) 
    {
        queue<TreeNode*> q;
        vector<vector<int>> res;
        if(!root)
            return res;
        q.push(root);
        
        stack<vector<int>> st;
        
        while(!q.empty())
        {
            int size = q.size();
            vector<int> helper;
            for(int i=0;i<size;i++)
            {
                TreeNode* node = q.front();
                q.pop(); 
                helper.push_back(node->val);
                
                if(node->left)
                    q.push(node->left);
                
                if(node->right)
                    q.push(node->right);
            }
            
            st.push(helper);

        }
       
        while(!st.empty())
        {
            res.push_back(st.top());
            st.pop();
        }
        return res;
    }
};

***************** BFS COde . reverse the answer*******
    vector<vector<int>> levelOrderBottom(TreeNode* root) 
    {
        queue<TreeNode*> q;
        vector<vector<int>> res;
        if(!root)
            return res;
        q.push(root);
        
        while(!q.empty())
        {
            int size = q.size();
            vector<int> helper;
            for(int i=0;i<size;i++)
            {
                TreeNode* node = q.front();
                q.pop(); 
                helper.push_back(node->val);
                
                if(node->left)
                    q.push(node->left);
                
                if(node->right)
                    q.push(node->right);
            }
            
            res.push_back(helper);

        }
        reverse(res.begin(),res.end());
        return res;
    }
