//https://leetcode.com/problems/binary-tree-maximum-path-sum/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int helper(TreeNode* root,int &maxsum)
    {
        if(!root)
            return 0;
        
        int leftsum = max(0,helper(root->left,maxsum)); //avoid negative values
        int rightsum = max(0,helper(root->right,maxsum));
        
        //update the maxsum
        maxsum = max(maxsum,root->val+leftsum+rightsum);
        
        
        return root->val + max(leftsum,rightsum);
    }
public:
    int maxPathSum(TreeNode* root) 
    {
        int maxsum = INT_MIN;
        helper(root,maxsum);
        
        return maxsum;
    }
};
