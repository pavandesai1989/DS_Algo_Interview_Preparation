//https://leetcode.com/problems/delete-node-in-a-bst/submissions/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* getlastright(TreeNode* root)
    {
        if(root->right == nullptr)
            return root;
        
        return getlastright(root->right);
    }
    
    TreeNode* helper(TreeNode* root)  
    {
        if(root->left == nullptr)
            return root->right;
        else if(root->right == nullptr)
            return root->left;
        
        //save the right child 
        TreeNode* rightchild = root->right;
        
        //get the last right of left tree
        TreeNode* lastright = getlastright(root->left);
        
        //connect lastright to rightchild
        lastright->right = rightchild;   /////vvvvimp
        
        return root->left;
    }
    
public:
    TreeNode* deleteNode(TreeNode* root, int key) 
    {
        if(root==nullptr) 
            return root;
        
        if(root->val == key)
            return helper(root);
        
        TreeNode* dummy = root; //return this as its original root
        while(root!=nullptr)
        {
            if(key < root->val) //move to left
            {
                if(root->left!=nullptr && root->left->val == key)
                {
                    root->left = helper(root->left);
                    break;
                }
                else
                    root = root->left;
            }
            else 
            {
                if(root->right!=nullptr && root->right->val == key)
                {
                    root->right = helper(root->right);
                    break;
                }
                else
                    root = root->right;
            }
        }
        return dummy; 
    }
};
