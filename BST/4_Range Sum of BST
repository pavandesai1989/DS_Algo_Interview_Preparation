//https://leetcode.com/problems/range-sum-of-bst/

//******* APPROACH 1******** USING THE INORDER TRAVERSAL 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void inorder(TreeNode* root,vector<int> &vec)
    {
        if(!root)
            return;
        inorder(root->left,vec);
        vec.push_back(root->val);
        inorder(root->right,vec);
    }
public:
    int rangeSumBST(TreeNode* root, int low, int high) 
    {
        vector<int> vec;
        int sum = 0;
        if(!root)
            return sum;
        
        inorder(root,vec);
        
        for(int i=0;i<vec.size();i++)
        {
            if(vec[i]>=low && vec[i]<=high)
                sum +=vec[i];
                
        }
        return sum;
    }
};




//*********APPROACH 2 ***** Time o(n)****No extra space 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void inorder(TreeNode* root,int &sum,int low,int high)
    {
        if(!root)
            return;
        inorder(root->left,sum,low,high);
        if(root->val>=low && root->val<=high)
            sum +=root->val;
        inorder(root->right,sum,low,high);
    }
public:
    int rangeSumBST(TreeNode* root, int low, int high) 
    {
        int sum = 0;
        if(!root)
            return sum;
        
        inorder(root,sum,low,high);
        return sum;
    }
};

